# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

parameters:
  - name: SoftwareVersion
    type: string

steps:
  # Most SDL tasks are run through the 1ES official pipeline template: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/overview
  # However, we still must run CodeSign and APIScan ourselves

  ###################################################################################################################################################################
  # RUN ANALYSIS
  # Steps in this section should contain 'condition: succeededOrFailed()' since one analyzer failing should not block the other analyzers from running.
  # https://docs.microsoft.com/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml#task-control-options
  ###################################################################################################################################################################

  # Use a disabled, empty script to display the section header in the pipeline UI.
  - script:
    displayName: === Run Analysis ===
    condition: false

  # Verify the loose DLLs are signed appropriately.
  # Note: This task takes ~3 minutes only because it is the first Guardian task in this job. So, it installs the Guardian components so the other tasks don't have to.
  # YAML reference: https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/code-signing-validation-build-task#v1-preview
  - task: CodeSign@1
    displayName: Verify Signed DLLs
    inputs:
      Path: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/bin/Dlls/
      # Glob Format: https://dev.azure.com/securitytools/SecurityIntegration/_wiki/wikis/Guardian/1378/Glob-Format
      Targets: '**/Microsoft.VisualStudio.AppDesigner*.dll;**/Microsoft.VisualStudio.Editors*.dll;**/Microsoft.VisualStudio.ProjectSystem.Managed*.dll'
    condition: succeededOrFailed()

  # Verifies the packages (and files within) are signed appropriately.
  - task: MicroBuildCodesignVerify@3
    displayName: Verify Signed Packages
    inputs:
      TargetFolders: |
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
        $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/VSSetup/Insertion
      # Filters out certain files (usually by extension) for Authenticode certificate verification.
      # File Format:
      #   Wildcards (* and ?) can be used and paths are relative to the TargetFolders locations.
      #   Format is one entry per line followed by a comma and then a comment as to why the entry is approved.
      ApprovalListPathForCerts: $(Build.SourcesDirectory)/eng/pipelines/configuration/AuthenticodeSigningFilter.txt
      # The bootstrapper folder is placed inside the VSSetup/Insertion folder. We don't want to verify the VS bootstrapper for signing.
      ExcludeFolders: bootstrapper
    condition: succeededOrFailed()

  # Scan for the use of undocumented APIs.
  # YAML reference: https://eng.ms/docs/security-compliance-identity-and-management-scim/security/azure-security/cloudai-security-fundamentals-engineering/security-integration/guardian-wiki/sdl-azdo-extension/apiscan-build-task#v2
  - task: APIScan@2
    displayName: Run APIScan
    inputs:
      softwareFolder: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/bin/Dlls
      softwareName: Dotnet-Project-System
      softwareVersionNum: ${{ parameters.SoftwareVersion }}
      softwareBuildNum: $(Build.BuildId)
      symbolsFolder: SRV*http://symweb
      noCopySymbols: true
      noCopyBinaries: true
      noDecompress: true
      isLargeApp: true
      verbosityLevel: minimal
      preserveTempFiles: true
    # APIScan requires an Azure Identity to run. That is provided via an Azure service principal.
    # - https://microsoft.sharepoint.com/teams/apiscan/APIScan%20User%20Wiki/authentication_using_AAD_identities.aspx
    # - https://microsoft.sharepoint.com/teams/apiscan/Lists/Contacts%20%20System%20Account%20and%20Wrappers/AllItems.aspx?skipSignal=true
    # This value is provided from the DotNet-Project-System variable group, defined in the stage variables.
    env:
      AzureServicesAuthConnectionString: $(ApiScanConnectionString)